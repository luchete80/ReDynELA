20c20
<   Class ElQua4nAx definition
---
>   Class ElQua4n2D definition
28c28
< #include <ElQua4nAx.h>
---
> #include <ElQua4n2D.h>
31c31
< const ElementData ElQua4nAx::elementData = {
---
> const ElementData ElQua4n2D::elementData = {
33,35c33,35
<     "ElQua4nAx",
<     Element::ElQua4nAx,
<     Element::Axisymetric,
---
>     "ElQua4n2D",
>     Element::ElQua4n2D,
>     Element::Bidimensional,
104c104
< ElQua4nAx::ElQua4nAx(Indice No_) : ElementAx(No_)
---
> ElQua4n2D::ElQua4n2D(Indice No_) : ElementPlane(No_)
114c114
< ElQua4nAx::ElQua4nAx(const ElQua4nAx &el) : ElementAx(el)
---
> ElQua4n2D::ElQua4n2D(const ElQua4n2D &el) : ElementPlane(el)
117c117
<   cout << "recopie d'un ElQua4nAx\n";
---
>   cout << "recopie d'un ElQua4n2D\n";
121c121
< ElQua4nAx::~ElQua4nAx()
---
> ElQua4n2D::~ElQua4n2D()
127,129c127,133
< //*Method: ElQua4nAx::getLength()
< //*This method calculates the equivalent length of an element used for time step calculus.
< //*The returned length corresponds to the minimum distance between two points on the edge of the element.
---
> //!Calcul de la longueur caract�ristique d'un �l�ment
> /*!
> Cette m�thode calcule la longueur caract�ristique d'un �l�ment � partir de la d�finition de la g�om�trie de cet �l�ment.
> La relation utilis�e pour ce calcul est donn�e par:
> \f[ l=\frac{x_{31}*y_{42}+x_{24}*y_{31}}{\sqrt{x_{24}^2+y_{42}^2+x_{31}^2+y_{31}^2}} \f] avec \f$ x_{ij} \f$ distance horizontale entre les points i et j et \f$ y_{ij} \f$ distance verticale entre les points i et j. 
> \return longueur caract�ristique de l'�l�ment
> */
131c135
< Real ElQua4nAx::getLength()
---
> Real ElQua4n2D::getLength()
146c150
< Real ElQua4nAx::getVolume()
---
> Real ElQua4n2D::getVolume()
160,352d163
< /*//-----------------------------------------------------------------------------
< Boolean
< ElQua4nAx::getUnderIntegrPointCoords (Indice i, Vec3D & coords, Real & weight)
< //-----------------------------------------------------------------------------
< {
<   weight = 4.;
<   coords = 0.;
< 
<   // retour
<   return (Success);
< }*/
< 
< //! calcul du jacobien, fonctions d'interpolations ...
< /*!
< Cette m�thode calcule le jacobien de l'�l�ment, les fonctions d'interpolations de l'�l�ment sur le domaine courant pour chaque point d'int�gration de l'�l�ment ainsi que les d�riv�es des fonctions d'interpolation de l'�l�ment par rapport aux coordonn�es physiques de l'�l�ment
< */
< /*//-----------------------------------------------------------------------------
< void
< ElQua4nAx::computeInternalMatrices (Boolean reference)
< //-----------------------------------------------------------------------------
< {
<   Element2D::computeInternalMatrices(reference);
< 
<   // coordonn�es de noeuds
<   Real x1 = nodes (0)->coords (0);
<   Real x2 = nodes (1)->coords (0);
<   Real x3 = nodes (2)->coords (0);
<   Real x4 = nodes (3)->coords (0);
<   Real y1 = nodes (0)->coords (1);
<   Real y2 = nodes (1)->coords (1);
<   Real y3 = nodes (2)->coords (1);
<   Real y4 = nodes (3)->coords (1);
< 
<   // variables de calcul
<   Real sqrt3 = sqrt (3.0);
<   Real sqrt3p1 = sqrt3 + 1.0;
<   Real sqrt3p2 = sqrt3 + 2.0;
<   Real sqrt3p3 = sqrt3 + 3.0;
<   Real sqrt3m1 = sqrt3 - 1.0;
<   Real sqrt3m2 = sqrt3 - 2.0;
<   Real sqrt3m3 = sqrt3 - 3.0;
< 
<   // variables temporaires
<   Real denom1, denom2;
< 
<   // calcul du point 0
<   getUnderIntegrationPoint (0);
<   denom1 = ((x3 - x1) * (y4 - y2) + (x2 - x4) * (y3 - y1));
<   underRef->dN (0, 0) = -(y4 - y2) / denom1;
<   underRef->dN (0, 1) = (x4 - x2) / denom1;
<   underRef->dN (1, 0) = (y3 - y1) / denom1;
<   underRef->dN (1, 1) = -(x3 - x1) / denom1;
<   underRef->dN (2, 0) = (y4 - y2) / denom1;
<   underRef->dN (2, 1) = -(x4 - x2) / denom1;
<   underRef->dN (3, 0) = -(y3 - y1) / denom1;
<   underRef->dN (3, 1) = (x3 - x1) / denom1;
<   underRef->N = 1. / 4.;
<   underRef->detJ = denom1 / 8.0;
<   if (reference) underRef->detJ0 = underRef->detJ;
< 
<   // calcul du point 1
<   getIntegrationPoint (0);
<   ref->detJ = -((sqrt3m3 * x3 - 2 * sqrt3 * x2 + sqrt3p3 * x1) * y4 +
< 		(-sqrt3m3 * x4 + sqrt3m3 * x2) * y3 +
< 		(2 * sqrt3 * x4 + (3 - sqrt3) * x3 - sqrt3p3 * x1) * y2 +
< 		((-sqrt3p3) * x4 + sqrt3p3 * x2) * y1) / 24.0;
<   // test de positivite du Jacobien
<   if (reference) ref->detJ0 = ref->detJ;
<   if (ref->detJ < 0.)
<     {
<       cerr << "Negative value of detJ encountered in element " << number <<
< 	endl;
<       cerr << "at time : " << Global_Structure->physics.current()->domains.current()->currentTime << endl;
<       cerr << "Emergency save of the last result\n";
<       cerr << "Program aborted\n";
<       Global_Structure->resultFile->transfert ();
<       exit (-1);
<     }
<   ref->N (0) = sqrt3p2 / 6.0;
<   ref->N (1) = 1.0 / 6.0;
<   ref->N (2) = -sqrt3m2 / 6.0;
<   ref->N (3) = 1.0 / 6.0;
<   denom1 = 1.0 / (sqrt3 * 8.0 * ref->detJ);
<   denom2 = 1.0 / (24.0 * ref->detJ);
<   ref->dN (0, 0) = -(sqrt3p1 * y4 - sqrt3p1 * y2) * denom1;
<   ref->dN (0, 1) = (sqrt3p1 * x4 - sqrt3p1 * x2) * denom1;
<   ref->dN (1, 0) = (2.0 * sqrt3 * y4 - sqrt3m3 * y3 - sqrt3p3 * y1) * denom2;
<   ref->dN (1, 1) = -(2.0 * sqrt3 * x4 - sqrt3m3 * x3 - sqrt3p3 * x1) * denom2;
<   ref->dN (2, 0) = (sqrt3m1 * y4 - sqrt3m1 * y2) * denom1;
<   ref->dN (2, 1) = -(sqrt3m1 * x4 - sqrt3m1 * x2) * denom1;
<   ref->dN (3, 0) = (sqrt3m3 * y3 - 2.0 * sqrt3 * y2 + sqrt3p3 * y1) * denom2;
<   ref->dN (3, 1) = -(sqrt3m3 * x3 - 2.0 * sqrt3 * x2 + sqrt3p3 * x1) * denom2;
< 
<   // calcul du point 2
<   getIntegrationPoint (1);
<   ref->detJ = -((sqrt3m3 * x3 - sqrt3m3 * x1) * y4 +
< 		(-sqrt3m3 * x4 + (-sqrt3p3) * x2 + 2 * sqrt3 * x1) * y3 +
< 		(sqrt3p3 * x3 - sqrt3p3 * x1) * y2 +
< 		(sqrt3m3 * x4 - 2 * sqrt3 * x3 + sqrt3p3 * x2) * y1) / 24.0;
<   if (reference) ref->detJ0 = ref->detJ;
<   // test de positivite du Jacobien
<   if (ref->detJ < 0.)
<     {
<       cerr << "Negative value of detJ encountered in element " << number <<
< 	endl;
<       cerr << "at time : " << Global_Structure->physics.current()->domains.current()->currentTime << endl;
<       cerr << "Emergency save of the last result\n";
<       cerr << "Program aborted\n";
<       Global_Structure->resultFile->transfert ();
<       exit (-1);
<     }
<   ref->N (0) = 1.0 / 6.0;
<   ref->N (1) = sqrt3p2 / 6.0;
<   ref->N (2) = 1.0 / 6.0;
<   ref->N (3) = -sqrt3m2 / 6.0;
<   denom1 = 1.0 / (sqrt3 * 8.0 * ref->detJ);
<   denom2 = 1.0 / (24.0 * ref->detJ);
<   ref->dN (0, 0) = (sqrt3m3 * y4 - 2.0 * sqrt3 * y3 + sqrt3p3 * y2) * denom2;
<   ref->dN (0, 1) = -(sqrt3m3 * x4 - 2.0 * sqrt3 * x3 + sqrt3p3 * x2) * denom2;
<   ref->dN (1, 0) = (sqrt3p1 * y3 - sqrt3p1 * y1) * denom1;
<   ref->dN (1, 1) = -(sqrt3p1 * x3 - sqrt3p1 * x1) * denom1;
<   ref->dN (2, 0) = -(sqrt3m3 * y4 + sqrt3p3 * y2 - 2.0 * sqrt3 * y1) * denom2;
<   ref->dN (2, 1) = (sqrt3m3 * x4 + sqrt3p3 * x2 - 2.0 * sqrt3 * x1) * denom2;
<   ref->dN (3, 0) = -(sqrt3m1 * y3 - sqrt3m1 * y1) * denom1;
<   ref->dN (3, 1) = (sqrt3m1 * x3 - sqrt3m1 * x1) * denom1;
< 
<   // calcul du point 3
<   getIntegrationPoint (2);
<   ref->detJ = ((sqrt3p3 * x3 - 2 * sqrt3 * x2 + sqrt3m3 * x1) * y4 +
< 	       ((-sqrt3p3) * x4 + sqrt3p3 * x2) * y3 +
< 	       (2 * sqrt3 * x4 - sqrt3p3 * x3 - sqrt3m3 * x1) * y2 +
< 	       (-sqrt3m3 * x4 + sqrt3m3 * x2) * y1) / 24.0;
<   if (reference) ref->detJ0 = ref->detJ;
<   // test de positivite du Jacobien
<   if (ref->detJ < 0.)
<     {
<       cerr << "Negative value of detJ encountered in element " << number <<
< 	endl;
<       cerr << "at time : " << Global_Structure->physics.current()->domains.current()->currentTime << endl;
<       cerr << "Emergency save of the last result\n";
<       cerr << "Program aborted\n";
<       Global_Structure->resultFile->transfert ();
<       exit (-1);
<     }
<   ref->N (0) = -sqrt3m2 / 6.0;
<   ref->N (1) = 1.0 / 6.0;
<   ref->N (2) = sqrt3p2 / 6.0;
<   ref->N (3) = 1.0 / 6.0;
<   denom1 = 1.0 / (sqrt3 * 8.0 * ref->detJ);
<   denom2 = 1.0 / (24.0 * ref->detJ);
<   ref->dN (0, 0) = -(sqrt3m1 * y4 - sqrt3m1 * y2) * denom1;
<   ref->dN (0, 1) = (sqrt3m1 * x4 - sqrt3m1 * x2) * denom1;
<   ref->dN (1, 0) = -(2.0 * sqrt3 * y4 - sqrt3p3 * y3 - sqrt3m3 * y1) * denom2;
<   ref->dN (1, 1) = (2.0 * sqrt3 * x4 - sqrt3p3 * x3 - sqrt3m3 * x1) * denom2;
<   ref->dN (2, 0) = (sqrt3p1 * y4 - sqrt3p1 * y2) * denom1;
<   ref->dN (2, 1) = -(sqrt3p1 * x4 - sqrt3p1 * x2) * denom1;
<   ref->dN (3, 0) = -(sqrt3p3 * y3 - 2.0 * sqrt3 * y2 + sqrt3m3 * y1) * denom2;
<   ref->dN (3, 1) = (sqrt3p3 * x3 - 2.0 * sqrt3 * x2 + sqrt3m3 * x1) * denom2;
< 
<   // calcul du point 4
<   getIntegrationPoint (3);
<   ref->detJ = ((sqrt3p3 * x3 - sqrt3p3 * x1) * y4 +
< 	       ((-sqrt3p3) * x4 - sqrt3m3 * x2 + 2 * sqrt3 * x1) * y3 +
< 	       (sqrt3m3 * x3 - sqrt3m3 * x1) * y2 +
< 	       (sqrt3p3 * x4 - 2 * sqrt3 * x3 + sqrt3m3 * x2) * y1) / 24.0;
<   if (reference) ref->detJ0 = ref->detJ;
<   // test de positivite du Jacobien
<   if (ref->detJ < 0.)
<     {
<       cerr << "Negative value of detJ encountered in element " << number <<
< 	endl;
<       cerr << "at time : " << Global_Structure->physics.current()->domains.current()-> currentTime<< endl;
<       cerr << "Emergency save of the last result\n";
<       cerr << "Program aborted\n";
<       Global_Structure->resultFile->transfert ();
<       exit (-1);
<     }
<   ref->N (0) = 1.0 / 6.0;
<   ref->N (1) = -sqrt3m2 / 6.0;
<   ref->N (2) = 1.0 / 6.0;
<   ref->N (3) = sqrt3p2 / 6.0;
<   denom1 = 1.0 / (sqrt3 * 8.0 * ref->detJ);
<   denom2 = 1.0 / (24.0 * ref->detJ);
<   ref->dN (0, 0) = -(sqrt3p3 * y4 - 2.0 * sqrt3 * y3 + sqrt3m3 * y2) * denom2;
<   ref->dN (0, 1) = (sqrt3p3 * x4 - 2.0 * sqrt3 * x3 + sqrt3m3 * x2) * denom2;
<   ref->dN (1, 0) = (sqrt3m1 * y3 - sqrt3m1 * y1) * denom1;
<   ref->dN (1, 1) = -(sqrt3m1 * x3 - sqrt3m1 * x1) * denom1;
<   ref->dN (2, 0) = (sqrt3p3 * y4 + sqrt3m3 * y2 - 2.0 * sqrt3 * y1) * denom2;
<   ref->dN (2, 1) = -(sqrt3p3 * x4 + sqrt3m3 * x2 - 2.0 * sqrt3 * x1) * denom2;
<   ref->dN (3, 0) = -(sqrt3p1 * y3 - sqrt3p1 * y1) * denom1;
<   ref->dN (3, 1) = (sqrt3p1 * x3 - sqrt3p1 * x1) * denom1;
< }*/
< 
354c165
< void ElQua4nAx::getShapeFunctionAtPoint(Vector &N, const Vec3D &point) const
---
> void ElQua4n2D::getShapeFunctionAtPoint(Vector &N, const Vec3D &point) const
367c178
< void ElQua4nAx::getDerShapeFunctionAtPoint(Matrix &N, const Vec3D &point)
---
> void ElQua4n2D::getDerShapeFunctionAtPoint(Matrix &N, const Vec3D &point)
385c196
< // ElQua4nAx::getIntgtoNodes (Vector & N, const Vec3D & point) const
---
> // ElQua4n2D::getIntgtoNodes (Vector & N, const Vec3D & point) const
399c210
< void ElQua4nAx::computeGlob2Loc()
---
> void ElQua4n2D::computeGlob2Loc()
444c255
< void ElQua4nAx::glob2Loc(const Vec3D &point, Vec3D &local)
---
> void ElQua4n2D::glob2Loc(const Vec3D &point, Vec3D &local)
