typedef struct {
  size_t    memMax; /*!< Maximum memory available */
  size_t    memCur; /*!< Current memory used */
  double    gap; /*!< Gap for table reallocation */
  int       ver; /*!< Version of the mesh file */
  int       dim; /*!< Dimension of the mesh */
  int       type; /*!< Type of the mesh */
  MMG5_int  npi,nti,nai,nei,np,na,nt,ne,npmax,namax,ntmax,nemax,xpmax,xtmax;
  MMG5_int  nquad,nprism; /*!< number of quadrangles and prisms */
  int       nsols; /*!< number of solutions (metric excluded) in the solution file (lower than \a NSOLS_MAX)*/
  MMG5_int  nc1;
  MMG5_int  base; /*!< Used with \a flag to know if an entity has been
                    treated */
  MMG5_int  mark; /*!< Flag for delaunay (to know if an entity has
                    been treated) */
  MMG5_int  xp,xt,xpr; /*!< Number of surfaces points, triangles/tetrahedra and prisms */
  MMG5_int  npnil; /*!< Index of first unused point */
  MMG5_int  nenil; /*!< Index of first unused element */
  MMG5_int  nanil; /*!< Index of first unused edge (2d only)*/
  MMG5_int  *adja; /*!< Table of tetrahedron adjacency: if
                    \f$adja[4*(i-1)+1+j]=4*k+l\f$ then the \f$i^{th}\f$ and
                    \f$k^th\f$ tetrahedra are adjacent and share their
                    faces \a j and \a l (resp.) */
  MMG5_int  *adjt; /*!< Table of triangles adjacency: if
                    \f$adjt[3*(i-1)+1+j]=3*k+l\f$ then the \f$i^{th}\f$ and
                    \f$k^th\f$ triangles are adjacent and share their
                    edges \a j and \a l (resp.) */
  MMG5_int  *adjapr; /*!< Table of prisms adjacency: if
                    \f$adjapr[5*(i-1)+1+j]=5*k+l\f$ then the \f$i^{th}\f$ and
                    \f$k^th\f$ prism are adjacent and share their
                    faces \a j and \a l (resp.) */
  MMG5_int  *adjq; /*!< Table of quadrangles adjacency: if
                    \f$adjq[4*(i-1)+1+j]=4*k+l\f$ then the \f$i^{th}\f$ and
                    \f$k^th\f$ quadrilaterals are adjacent and share their
                    edges \a j and \a l (resp.) */
  int       *ipar;  /*!< Store indices of the local parameters */
  MMG5_pPoint    point; /*!< Pointer toward the \ref MMG5_Point structure */
  MMG5_pxPoint   xpoint; /*!< Pointer toward the \ref MMG5_xPoint structure */
  MMG5_pTetra    tetra; /*!< Pointer toward the \ref MMG5_Tetra structure */
  MMG5_pxTetra   xtetra; /*!< Pointer toward the \ref MMG5_xTetra structure */
  MMG5_pPrism    prism; /*!< Pointer toward the \ref MMG5_Prism structure */
  MMG5_pxPrism   xprism; /*!< Pointer toward the \ref MMG5_pxPrism structure */
  MMG5_pTria     tria; /*!< Pointer toward the \ref MMG5_Tria structure */
  MMG5_pQuad     quadra; /*!< Pointer toward the \ref MMG5_Quad structure */
  MMG5_pEdge     edge; /*!< Pointer toward the \ref MMG5_Edge structure */
  MMG5_HGeom     htab; /*!< \ref MMG5_HGeom structure */
  MMG5_Info      info; /*!< \ref MMG5_Info structure */
  char           *namein; /*!< Input mesh name */
  char           *nameout; /*!< Output mesh name */

} MMG5_Mesh;
typedef MMG5_Mesh  * MMG5_pMesh;


https://forum.mmgtools.org/t/mmgs-and-quadrilateral-mesh/500/3

IS PROPOSED THIS PATCH 
diff --git a/src/mmgs/inout_s.c b/src/mmgs/inout_s.c
index 08f62a8d..5ea0a560 100644
--- a/src/mmgs/inout_s.c
+++ b/src/mmgs/inout_s.c
@@ -291,7 +291,7 @@ int MMGS_loadMesh(MMG5_pMesh mesh, const char *filename) {
     }
   }
 
-  if ( !mesh->npi || !mesh->nti ) {
+  if ( !mesh->npi || !(mesh->nti+nq) ) {
     fprintf(stdout,"  ** MISSING DATA\n");
     return -1;
   }


  for (k=1; k<=mesh->np; k++) {
    ppt = &mesh->point[k];


